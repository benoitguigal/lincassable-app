alter type "public"."app_permission" rename to "app_permission__old_version_to_be_dropped";

create type "public"."app_permission" as enum (
    'point_de_collecte.select',
    'point_de_collecte.insert',
    'point_de_collecte.update',
    'point_de_collecte.delete',
    'tournee.select',
    'tournee.insert',
    'tournee.update',
    'tournee.delete',
    'collecte.select',
    'collecte.insert',
    'collecte.update',
    'collecte.delete',
    'transporteur.select',
    'transporteur.insert',
    'transporteur.update',
    'transporteur.delete',
    'transporteur_users.select',
    'transporteur_users.update',
    'transporteur_users.insert',
    'transporteur_users.delete',
    'zone_de_collecte.select',
    'zone_de_collecte.update',
    'zone_de_collecte.insert',
    'zone_de_collecte.delete',
    'prevision.select',
    'mailing.select',
    'mailing.insert',
    'mailing.update',
    'mailing.delete',
    'mail_template.select',
    'mail_statut.select',
    'mail_statut.insert',
    'mail_statut.update',
    'mail_template.update',
    'mail_template.insert',
    'mail_template.delete',
    'inventaire.select',
    'inventaire.update',
    'inventaire.delete',
    'inventaire.insert'
);

create table "public"."inventaire" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "point_de_collecte_id" bigint not null,
    "stock_casiers_75" smallint,
    "stock_casiers_33" smallint,
    "stock_paloxs" smallint,
    "date" timestamp with time zone not null
);

alter table
    "public"."inventaire" enable row level security;

alter table
    "public"."role_permissions"
alter column
    permission type "public"."app_permission" using permission :: text :: "public"."app_permission";

drop type "public"."app_permission__old_version_to_be_dropped";

CREATE UNIQUE INDEX inventaire_pkey ON public .inventaire USING btree (id);

alter table
    "public"."inventaire"
add
    constraint "inventaire_pkey" PRIMARY KEY using index "inventaire_pkey";

alter table
    "public"."inventaire"
add
    constraint "inventaire_point_de_collecte_id_fkey" FOREIGN KEY (point_de_collecte_id) REFERENCES point_de_collecte(id) ON
UPDATE
    CASCADE ON
DELETE
    CASCADE not valid;

alter table
    "public"."inventaire" validate constraint "inventaire_point_de_collecte_id_fkey";

grant
delete
    on table "public"."inventaire" to "anon";

grant
insert
    on table "public"."inventaire" to "anon";

grant references on table "public"."inventaire" to "anon";

grant
select
    on table "public"."inventaire" to "anon";

grant trigger on table "public"."inventaire" to "anon";

grant truncate on table "public"."inventaire" to "anon";

grant
update
    on table "public"."inventaire" to "anon";

grant
delete
    on table "public"."inventaire" to "authenticated";

grant
insert
    on table "public"."inventaire" to "authenticated";

grant references on table "public"."inventaire" to "authenticated";

grant
select
    on table "public"."inventaire" to "authenticated";

grant trigger on table "public"."inventaire" to "authenticated";

grant truncate on table "public"."inventaire" to "authenticated";

grant
update
    on table "public"."inventaire" to "authenticated";

grant
delete
    on table "public"."inventaire" to "service_role";

grant
insert
    on table "public"."inventaire" to "service_role";

grant references on table "public"."inventaire" to "service_role";

grant
select
    on table "public"."inventaire" to "service_role";

grant trigger on table "public"."inventaire" to "service_role";

grant truncate on table "public"."inventaire" to "service_role";

grant
update
    on table "public"."inventaire" to "service_role";

create policy "Allow delete for authorized" on "public"."inventaire" as permissive for
delete
    to authenticated using (
        (
            SELECT
                authorize_user('inventaire.delete' :: text) AS authorize
        )
    );

create policy "Allow insert for authorized" on "public"."inventaire" as permissive for
insert
    to authenticated with check (
        (
            SELECT
                authorize_user('inventaire.insert' :: text) AS authorize
        )
    );

create policy "Allow read for authorized" on "public"."inventaire" as permissive for
select
    to authenticated using (
        (
            SELECT
                authorize_user('inventaire.select' :: text) AS authorize
        )
    );

create policy "Allow update for authorized" on "public"."inventaire" as permissive for
update
    to authenticated using (
        (
            SELECT
                authorize_user('inventaire.update' :: text) AS authorize
        )
    );